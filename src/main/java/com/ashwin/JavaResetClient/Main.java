/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.ashwin.JavaResetClient;

import com.ashwin.JavaResetClient.RestClient.*;
import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.FlatLightLaf;
import com.formdev.flatlaf.FlatDarculaLaf;
import com.formdev.flatlaf.FlatIntelliJLaf;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author ashwi
 */
public class Main extends javax.swing.JFrame {

    private static final Logger LOGGER = Logger.getLogger(Main.class.getName());
    private static RestApplication restApplication;
    private String bodyRaw = "";
    private String bodyPretty = "";
    private Gson gson = new GsonBuilder().setPrettyPrinting().create();
    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        cmbRequestType = new javax.swing.JComboBox<>();
        txtRequestURL = new javax.swing.JTextField();
        btnRequestSend = new javax.swing.JButton();
        tabsRequest = new javax.swing.JTabbedPane();
        tabRequestParams = new javax.swing.JPanel();
        btnParamAdd = new javax.swing.JButton();
        btnParamRemove = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblParams = new javax.swing.JTable();
        tabRequestAuthorisation = new javax.swing.JPanel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jPanel7 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        tabRequestHeaders = new javax.swing.JPanel();
        btnHeaderAdd = new javax.swing.JButton();
        btnHeaderRemove = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblRequestHeaders = new javax.swing.JTable();
        tabRequestBody = new javax.swing.JPanel();
        cmbBodyType = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtRequestBody = new javax.swing.JTextArea();
        tabsResponse = new javax.swing.JTabbedPane();
        tabResponseBody = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtResponseBody = new javax.swing.JTextArea();
        btnPretty = new javax.swing.JToggleButton();
        btnRaw = new javax.swing.JToggleButton();
        tabResponseHeaders = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblResponseHeaders = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Java Rest Client");
        setMinimumSize(new java.awt.Dimension(755, 430));

        cmbRequestType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "POST", "GET" }));
        cmbRequestType.setSelectedIndex(1);

        txtRequestURL.setText("http://192.168.1.35:5005/rest/execute");
        txtRequestURL.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                txtRequestURLInputMethodTextChanged(evt);
            }
        });
        txtRequestURL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRequestURLKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRequestURLKeyTyped(evt);
            }
        });

        btnRequestSend.setText("Send");
        btnRequestSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRequestSendActionPerformed(evt);
            }
        });

        btnParamAdd.setText("Add");
        btnParamAdd.setMaximumSize(new java.awt.Dimension(75, 22));
        btnParamAdd.setMinimumSize(new java.awt.Dimension(75, 22));
        btnParamAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnParamAddActionPerformed(evt);
            }
        });

        btnParamRemove.setText("Remove");
        btnParamRemove.setMaximumSize(new java.awt.Dimension(75, 22));
        btnParamRemove.setMinimumSize(new java.awt.Dimension(75, 22));
        btnParamRemove.setPreferredSize(new java.awt.Dimension(75, 22));
        btnParamRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnParamRemoveActionPerformed(evt);
            }
        });

        tblParams.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Key", "Value"
            }
        ));
        tblParams.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tblParamsPropertyChange(evt);
            }
        });
        tblParams.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblParamsKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tblParamsKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(tblParams);

        javax.swing.GroupLayout tabRequestParamsLayout = new javax.swing.GroupLayout(tabRequestParams);
        tabRequestParams.setLayout(tabRequestParamsLayout);
        tabRequestParamsLayout.setHorizontalGroup(
            tabRequestParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabRequestParamsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabRequestParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnParamRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnParamAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 667, Short.MAX_VALUE)
                .addContainerGap())
        );
        tabRequestParamsLayout.setVerticalGroup(
            tabRequestParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabRequestParamsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabRequestParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(tabRequestParamsLayout.createSequentialGroup()
                        .addComponent(btnParamAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnParamRemove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 103, Short.MAX_VALUE)))
                .addContainerGap())
        );

        tabsRequest.addTab("Params", tabRequestParams);

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No Auth", "Bearer Token", "Basic Auth" }));
        jComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox2ItemStateChanged(evt);
            }
        });
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jPanel7.setBackground(new java.awt.Color(153, 255, 153));

        jLabel1.setText("Token");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout tabRequestAuthorisationLayout = new javax.swing.GroupLayout(tabRequestAuthorisation);
        tabRequestAuthorisation.setLayout(tabRequestAuthorisationLayout);
        tabRequestAuthorisationLayout.setHorizontalGroup(
            tabRequestAuthorisationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabRequestAuthorisationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        tabRequestAuthorisationLayout.setVerticalGroup(
            tabRequestAuthorisationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabRequestAuthorisationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(tabRequestAuthorisationLayout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 114, Short.MAX_VALUE))
        );

        tabsRequest.addTab("Authorisation", tabRequestAuthorisation);

        btnHeaderAdd.setText("Add");
        btnHeaderAdd.setPreferredSize(new java.awt.Dimension(75, 22));
        btnHeaderAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHeaderAddActionPerformed(evt);
            }
        });

        btnHeaderRemove.setText("Remove");
        btnHeaderRemove.setPreferredSize(new java.awt.Dimension(75, 22));
        btnHeaderRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHeaderRemoveActionPerformed(evt);
            }
        });

        tblRequestHeaders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Boolean(true), "User-Agent", "RestClient/0.5.3 (Windows 10 10.0; amd64) Apache NetBeans IDE 20"},
                {null, "scope", "get"},
                {null, "token", "eyJ0ZXJtaW5hbEFkZHJlc3MiOiJCQUJDQkNTSCJ9"}
            },
            new String [] {
                "", "Key", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblRequestHeaders);
        if (tblRequestHeaders.getColumnModel().getColumnCount() > 0) {
            tblRequestHeaders.getColumnModel().getColumn(0).setMinWidth(40);
            tblRequestHeaders.getColumnModel().getColumn(0).setMaxWidth(40);
        }

        javax.swing.GroupLayout tabRequestHeadersLayout = new javax.swing.GroupLayout(tabRequestHeaders);
        tabRequestHeaders.setLayout(tabRequestHeadersLayout);
        tabRequestHeadersLayout.setHorizontalGroup(
            tabRequestHeadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabRequestHeadersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabRequestHeadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnHeaderAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnHeaderRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 667, Short.MAX_VALUE)
                .addContainerGap())
        );
        tabRequestHeadersLayout.setVerticalGroup(
            tabRequestHeadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabRequestHeadersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabRequestHeadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(tabRequestHeadersLayout.createSequentialGroup()
                        .addComponent(btnHeaderAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnHeaderRemove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 103, Short.MAX_VALUE)))
                .addContainerGap())
        );

        tabsRequest.addTab("Headers", tabRequestHeaders);

        cmbBodyType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Text", "JSON", "XML" }));
        cmbBodyType.setPreferredSize(new java.awt.Dimension(75, 22));

        txtRequestBody.setColumns(20);
        txtRequestBody.setRows(5);
        txtRequestBody.setText("{\n \"path\":\"workarea/security/token\"\n}");
        jScrollPane3.setViewportView(txtRequestBody);

        javax.swing.GroupLayout tabRequestBodyLayout = new javax.swing.GroupLayout(tabRequestBody);
        tabRequestBody.setLayout(tabRequestBodyLayout);
        tabRequestBodyLayout.setHorizontalGroup(
            tabRequestBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabRequestBodyLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmbBodyType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 667, Short.MAX_VALUE)
                .addContainerGap())
        );
        tabRequestBodyLayout.setVerticalGroup(
            tabRequestBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabRequestBodyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabRequestBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                    .addGroup(tabRequestBodyLayout.createSequentialGroup()
                        .addComponent(cmbBodyType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        tabsRequest.addTab("Body", tabRequestBody);

        txtResponseBody.setEditable(false);
        txtResponseBody.setColumns(20);
        txtResponseBody.setRows(5);
        jScrollPane4.setViewportView(txtResponseBody);

        buttonGroup1.add(btnPretty);
        btnPretty.setText("Pretty");
        btnPretty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrettyActionPerformed(evt);
            }
        });

        buttonGroup1.add(btnRaw);
        btnRaw.setText("Raw");
        btnRaw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRawActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabResponseBodyLayout = new javax.swing.GroupLayout(tabResponseBody);
        tabResponseBody.setLayout(tabResponseBodyLayout);
        tabResponseBodyLayout.setHorizontalGroup(
            tabResponseBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabResponseBodyLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnPretty)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRaw)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 760, Short.MAX_VALUE)
        );
        tabResponseBodyLayout.setVerticalGroup(
            tabResponseBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabResponseBodyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabResponseBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPretty)
                    .addComponent(btnRaw))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
        );

        tabsResponse.addTab("Body", tabResponseBody);

        tblResponseHeaders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Key", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tblResponseHeaders);

        javax.swing.GroupLayout tabResponseHeadersLayout = new javax.swing.GroupLayout(tabResponseHeaders);
        tabResponseHeaders.setLayout(tabResponseHeadersLayout);
        tabResponseHeadersLayout.setHorizontalGroup(
            tabResponseHeadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 760, Short.MAX_VALUE)
        );
        tabResponseHeadersLayout.setVerticalGroup(
            tabResponseHeadersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabResponseHeadersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
        );

        tabsResponse.addTab("Headers", tabResponseHeaders);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabsRequest)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmbRequestType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtRequestURL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRequestSend))
                    .addComponent(tabsResponse, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbRequestType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRequestURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRequestSend))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabsRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabsResponse)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnParamAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnParamAddActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblParams.getModel();
        model.addRow(new Object[]{});
        tblParams.requestFocus();
        tblParams.editCellAt(tblParams.getRowCount()-1, 0);
    }//GEN-LAST:event_btnParamAddActionPerformed

    private void btnParamRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnParamRemoveActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblParams.getModel();
        model.removeRow(tblParams.getSelectedRow());
    }//GEN-LAST:event_btnParamRemoveActionPerformed

    private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox2ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ItemStateChanged

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void btnRequestSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRequestSendActionPerformed
        // TODO add your handling code here:
        
        Map<String, String> params = new HashMap<>();
        Map<String, String> headers = new HashMap<>();
        String requestURL = txtRequestURL.getText();
        String body = txtRequestBody.getText();
        Request.BodyType bodyType = Request.BodyType.valueOf(cmbBodyType.getItemAt(cmbBodyType.getSelectedIndex()).toUpperCase());
        Request.Type type = Request.Type.valueOf(cmbRequestType.getItemAt(cmbRequestType.getSelectedIndex()));
        
        if (requestURL == null || requestURL.trim().equals("")){
            LOGGER.log(Level.INFO, "url is mandatory");
            return;
        }
        
        DefaultTableModel modelHeadersTable = (DefaultTableModel) tblRequestHeaders.getModel();
        for (int i = 0; i < modelHeadersTable.getRowCount(); i++) {
            if (modelHeadersTable.getValueAt(i, 0) != null && (Boolean) modelHeadersTable.getValueAt(i, 0) != false){
                Object key = modelHeadersTable.getValueAt(i, 1);
                Object value = modelHeadersTable.getValueAt(i, 2);
                System.out.println(key);
                if (key != null && value != null) headers.put(key.toString(), value.toString());
            }
        }

        LOGGER.log(Level.INFO, "request type is {0}", type);
        
        Request request = new Request();
        request.setType(type);
        request.setUrl(requestURL);
        request.setBody(body);
        request.setBodyType(bodyType);
        request.setHeaders(headers);
        request.setParams(params);
        
        txtResponseBody.setText("");
        txtResponseBody.setEditable(false);
        bodyRaw = "";
        bodyPretty = "";
        DefaultTableModel model = (DefaultTableModel)tblResponseHeaders.getModel();
 
        for (int i = model.getRowCount() - 1; i >= 0 ; i--) {
            model.removeRow(i);
        }
        
        LOGGER.log(Level.INFO, "request sending to url {0}", requestURL);
        Response response = restApplication.execute(request);
        LOGGER.log(Level.INFO, "response from url {0}", requestURL);
        
        if (response == null) return;
        
        if (response.getBody() != null){
            bodyRaw = response.getBody();
            txtResponseBody.setEditable(true);

            if (response.getBodyType().equals("JSON")){
                Object json = gson.fromJson(bodyRaw, Object.class);
                bodyPretty = new GsonBuilder().setPrettyPrinting().create().toJson(json);
            }else{
                bodyPretty = bodyRaw;
            }
            updateResponseBody();
        }
        
        if (response.getHeaders() != null){
            for (Map.Entry<String, String> entry : response.getHeaders().entrySet()) {
                model.addRow(new Object[]{entry.getKey(), entry.getValue()});
            }
        }
    }//GEN-LAST:event_btnRequestSendActionPerformed

    private void btnHeaderAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHeaderAddActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblRequestHeaders.getModel();
        model.addRow(new Object[]{true, null, null});
        tblRequestHeaders.requestFocus();
        tblRequestHeaders.editCellAt(tblRequestHeaders.getRowCount()-1, 1);
    }//GEN-LAST:event_btnHeaderAddActionPerformed

    private void btnHeaderRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHeaderRemoveActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblRequestHeaders.getModel();
        model.removeRow(tblRequestHeaders.getSelectedRow());
    }//GEN-LAST:event_btnHeaderRemoveActionPerformed

    private void txtRequestURLInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_txtRequestURLInputMethodTextChanged
        
    }//GEN-LAST:event_txtRequestURLInputMethodTextChanged

    private void txtRequestURLKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRequestURLKeyTyped

    }//GEN-LAST:event_txtRequestURLKeyTyped

    private void txtRequestURLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRequestURLKeyReleased
        updateParamsInTable();
    }//GEN-LAST:event_txtRequestURLKeyReleased

    private void tblParamsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblParamsKeyReleased
        updateParamsInURL();
    }//GEN-LAST:event_tblParamsKeyReleased

    private void tblParamsPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblParamsPropertyChange
        updateParamsInURL();
    }//GEN-LAST:event_tblParamsPropertyChange

    private void tblParamsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblParamsKeyTyped

    }//GEN-LAST:event_tblParamsKeyTyped

    private void btnRawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRawActionPerformed
        updateResponseBody();
    }//GEN-LAST:event_btnRawActionPerformed

    private void btnPrettyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrettyActionPerformed
        updateResponseBody();
    }//GEN-LAST:event_btnPrettyActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        restApplication = new RestApplication();
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
//        FlatDarkLaf.setup();
        FlatLightLaf.setup();
//        FlatDarculaLaf.setup();
//        FlatIntelliJLaf.setup();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHeaderAdd;
    private javax.swing.JButton btnHeaderRemove;
    private javax.swing.JButton btnParamAdd;
    private javax.swing.JButton btnParamRemove;
    private javax.swing.JToggleButton btnPretty;
    private javax.swing.JToggleButton btnRaw;
    private javax.swing.JButton btnRequestSend;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cmbBodyType;
    private javax.swing.JComboBox<String> cmbRequestType;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JPanel tabRequestAuthorisation;
    private javax.swing.JPanel tabRequestBody;
    private javax.swing.JPanel tabRequestHeaders;
    private javax.swing.JPanel tabRequestParams;
    private javax.swing.JPanel tabResponseBody;
    private javax.swing.JPanel tabResponseHeaders;
    private javax.swing.JTabbedPane tabsRequest;
    private javax.swing.JTabbedPane tabsResponse;
    private javax.swing.JTable tblParams;
    private javax.swing.JTable tblRequestHeaders;
    private javax.swing.JTable tblResponseHeaders;
    private javax.swing.JTextArea txtRequestBody;
    private javax.swing.JTextField txtRequestURL;
    private javax.swing.JTextArea txtResponseBody;
    // End of variables declaration//GEN-END:variables

    private void updateParamsInTable() {
        String oldURL = txtRequestURL.getText();
        Pattern pattern = Pattern.compile("^[^?#]+\\?([^#]+)");
        Matcher matcher = pattern.matcher(oldURL);
        DefaultTableModel model = (DefaultTableModel) tblParams.getModel();

        while (matcher.find()) {
            String[] params = matcher.group(1).split("&");
            List<String[]> tableArray = new ArrayList<>();
            for (String param : params) {
                String[] paramArray = param.split("=");
                tableArray.add(paramArray);
            }
            for (int i = model.getRowCount() - 1; i >= 0 ; i--) {
                model.removeRow(i);
            }
            for (String[] array : tableArray) {
                model.addRow(array);
            }
        }
    }

    private void updateParamsInURL() {
        String oldURL = txtRequestURL.getText();
        Pattern pattern = Pattern.compile("^([^?#]+)");
        Matcher matcher = pattern.matcher(oldURL);

        while (matcher.find()) {
            String hostAddress = matcher.group(1);
            DefaultTableModel model = (DefaultTableModel) tblParams.getModel();

            List<String> params = new ArrayList<>();
            for (int i = 0 ; i < model.getRowCount() ; i++) {
                if (model.getValueAt(i, 0) != null &&  model.getValueAt(i, 1) != null){
                    params.add(model.getValueAt(i, 0) + "=" + model.getValueAt(i, 1));
                }
            }
            if (!params.isEmpty() ) hostAddress += "?" + String.join("&", params);
            txtRequestURL.setText(hostAddress);
        }
    }

    private void updateResponseBody() {
        if (btnRaw.isSelected()){
            txtResponseBody.setText(bodyRaw);
        }else{
            txtResponseBody.setText(bodyPretty);
        }
    }

}
